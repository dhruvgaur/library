vector<LL> dist(n,LLONG_MAX);
vector<LL> last_edge(n,LLONG_MAX);
vector<int> top(n);

fr(i,0,n)top[i] = i;

dist[s] = 0;
last_edge[s] = 0;

priority_queue< pair<LL,LL> , vector<pair<LL,LL> > , greater<pair<LL, LL> > > Q;
Q.push(mp(0,s));

pair<LL,LL> temp;
while(!Q.empty()){
  
  temp = Q.top();
  Q.pop();
  
  LL from = temp.second;
  LL temp2 = temp.first;

  for(int i=0;i<G[from].size();i++){
  
      LL to = G[from][i].second;
      LL d = G[from][i].first;
  
      if(dist[to] > temp2 + d){
  
  	top[to] = from;
  	dist[to] = temp2 + d;
  	last_edge[to] = d;
  	Q.push(mp(temp2+d,to));
  
      }
  }

}
